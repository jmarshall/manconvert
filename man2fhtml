#!/usr/bin/env perl
#
# man2fhtml -- convert (a subset of) man source to HTML
#
#   Copyright (C) 2014, 2015, 2017, 2019-2022 John Marshall

use strict;
use warnings;

use Getopt::Long qw(:config bundling no_ignore_case);

my $mode = 'html';
my $output_fname;
my $permalink;

my $usage = <<'EOF';
Usage: man2fhtml [-m MODE] [-o FILE] FILE
Options:
  -l, --location URL Specify final location (e.g., for Jekyll front matter)
  -m, --mode MODE    Set output mode to "html", "jekyll", or "raw"  [html]
  -o, --output FILE  Write to FILE rather than standard output
EOF

die $usage if scalar @ARGV == 0;
GetOptions(
    'location|l=s' => \$permalink,
    'mode|m=s' => \$mode,
    'output|o=s' => \$output_fname,
    'help' => sub { print $usage; exit 0; }) or die $usage;

push @ARGV, '-' if scalar @ARGV == 0;

my $TH_subref;
$TH_subref = \&title_html if $mode eq 'html';
$TH_subref = \&title_jekyll if $mode eq 'jekyll';
$TH_subref = \&ignore if $mode eq 'raw';
die "$0: unknown output mode \"$mode\"\n" unless defined $TH_subref;

my @paramode = ('p');
my @fontmodes = ('R', 'R');
my %fragments;
my $final_trailer;
my @instack;

sub open_input {
    my ($fname) = @_;
    my $relname = $fname;
    if (scalar @instack > 0 && $fname !~ m{^/} && $fname ne '-') {
        local $_ = $instack[-2];
        if (m{/}) { s{/[^/]*$}{}; $relname = "$_/$fname"; }
    }

    open my $inf, $relname or die "$0: can't open \"$fname\": $!\n";
    push @instack, 0, $fname, $inf;
}

sub warnloc {
    warn "$instack[-2]:$instack[-3]: ", @_;
}

sub getline {
    for (;;) {
        return undef if scalar @instack == 0;

        my $inf = $instack[-1];
        local $_ = <$inf>;
        if (defined $_) { $instack[-3]++; return $_; }

        close $inf or die "$0: closing \"$instack[-2]\" failed: $!\n";
        $#instack -= 3;
    }
}

sub split_quoted {
    local ($_) = @_;
    my ($word, @words);

    s/\\\s/\032/g; # Temporarily change \-whitespace to SUB characters...

    $_ .= ' ';
    while (/\S/) {
        s/^\s*//;
        if (substr($_,0,1) eq '"') { ($word, $_) = split /"/, substr($_, 1), 2 }
        else { ($word, $_) = split /\s/, $_, 2 }
        $word =~ s/\032/ /g; # ...and back to unescaped spaces
        push @words, $word;
    }
    return @words;
}

sub fontelt {
    my ($prefix, $mode) = @_;
    return "<${prefix}b>" if $mode eq 'B';
    return "<${prefix}em>" if $mode eq 'I';
    return "";
}

sub conv_fontescape {
    my ($in_text, $add_close) = @_;
    my $text = "";
    my ($mode, $prevmode) = @fontmodes;
    foreach (split /(\\f[BIPR])/, $in_text) {
        my $newmode = undef;
        if (/\\f([BIR])/) { $newmode = $1 }
        elsif ($_ eq '\fP') { $newmode = $prevmode }

        if (defined $newmode) {
            $prevmode = $mode;
            $_ = fontelt('/', $mode).fontelt('', $newmode);
            $mode = $newmode;
        }
        $text .= $_;
    }

    if ($add_close) {
        $text .= fontelt('/', $mode);
        $mode = $prevmode = 'R';
    }

    @fontmodes = ($mode, $prevmode);
    return $text;
}

my %special = (
    # Quotes
    Bq => '&bdquo;', bq => '&sbquo;', lq => '&ldquo;', rq => '&rdquo;',
    oq => '&lsquo;', cq => '&rsquo;', aq => '\'', dq => '"',
    Fo => '&laquo;', Fc => '&raquo;', fo => '&lsaquo;', fc => '&rsaquo;',
    # Punctuation
    'r!' => '&iexcl;', 'r?' => '&iquest;',
    em => '&mdash;', en => '&ndash;', hy => '&hyphen;',
    el => '&hellip;', # Common local addition
    # Brackets (omitting the extension pieces)
    lB => '[', rB => ']', lC => '{', rC => '}', la => '&lang;', ra => '&rang;',
    # Arrows
    '<-' => '&larr;', '->' => '&rarr;', '<>' => '&harr;',
    da => '&darr;', ua => '&uarr;', va => '&varr;',
    lA => '&lArr;', rA => '&rArr;', hA => '&hArr;',
    dA => '&dArr;', uA => '&uArr;', vA => '&vArr;',
    an => '&#x23AF;',
    # Lines
    ba => '|', br => '&boxv;', ul => '_', rn => '&oline;', ru => '_',
    bb => '&brvbar;', sl => '/', rs => '\\',
    # Text markers
    ci => '&#x25CB;', bu => '&bull;', dd => '&Dagger;', dg => '&dagger;',
    lz => '&loz;', sq => '&squ;', ps => '&para;', sc => '&sect;',
    lh => '&#x261C;', rh => '&#x261E;', at => '@', sh => '#',
    CR => '&crarr;', OK => '&check;',
    # Legal symbols (omitting Bell Labs logo)
    co => '&copy;', rg => '&reg;', tm => '&trade;',
    # Currency symbols
    Do => '$', ct => '&cent;', eu => '&euro;', Eu => '&euro;',
    Ye => '&yen;', Po => '&pound;', Cs => '&curren;', Fn => '&fnof;',
    # Units
    de => '&deg;', '%0' => '&permil;', fm => '&prime;', sd => '&Prime;',
    mc => '&micro;', Of => '&ordf;', Om => '&ordm;',
    # Logical symbols
    AN => '&and;', OR => '&or;', no => '&not;', tno => '&not;',
    te => '&exist;', fa => '&forall;', st => '&ni;',
    '3d' => '&there4;', tf => '&there4;', or => '|',
    # Mathematical symbols
    12 => '&frac12;', 14 => '&frac14;', 34 => '&frac34;',
    18 => '&frac18;', 38 => '&frac38;', 58 => '&frac58;', 78 => '&frac78;',
    S1 => '&sup1;', S2 => '&sup2;', S3 => '&sup3;',
    pl => '+', mi => '&minus;',
    '-+' => '&mnplus;', '+-' => '&plusmn;', 't+-' => '&plusmn;',
    pc => '&middot;', md => '&sdot;', mu => '&times;', tmu => '&times;',
    'c*' => '&otimes;', 'c+' => '&oplus;',
    di => '&divide;', tdi => '&divide;',
    'f/' => '&frasl;', '**' => '&lowast;',
    '<=' => '&le;', '>=' => '&ge;', '<<' => '&Lt;', '>>' => '&Gt;',
    eq => '=', '!=' => '&ne;', '==' => '&equiv;', ne => '&nequiv;',
    '=~' => '&cong;', '|=' => '&sime;', ap => '&sim;',
    '~~' => '&asymp;', '~=' => '&asymp;', pt => '&prop;',
    es => '&empty;', mo => '&isin;', nm => '&notin;',
    sb => '&sub;', nb => '&nsub;', sp => '&sup;', nc => '&nsup;',
    ib => '&sube;', ip => '&supe;', ca => '&cap;', cu => '&cup;',
    '/_' => '&ang;', pp => '&perp;', is => '&int;', integral => '&int;',
    sum => '&sum;', product => '&prod;', coproduct => '&coprod;',
    gr => '&nabla;', sr => '&radic;', sqrt => '&radic;',
    lc => '&lceil;', rc => '&rceil;', lf => '&lfloor;', rf => '&rfloor;',
    if => '&infin;', Ah => '&alefsym;', Im => '&image;', Re => '&real;',
    wp => '&weierp;', pd => '&part;', '-h' => '&planck;', 'hbar' => '&planck;',
    # Card symbols
    CL => '&clubs;', SP => '&spades;', HE => '&hearts;', DI => '&diams;',
);

my %strings = (
    R => '&reg;', Tm => '&trade;', lq => '&ldquo;', rq => '&rdquo;',
);

my %bullets = (
    'o' => 1, '\(bu' => 1, '\(ci' => 1
);

my %paramode_close = (
    p => undef, dl => '</dd></dl>', ul => '</li></ul>'
);

sub conv_special {
    local ($_) = $_[0];
    s/\\&//g;
    s/\\-/\\(en/g;
    s/&/&amp;/g;
    while (s/\Q\(\E(..)/$special{$1}/eg) { }
    while (s/\Q\[\E([^]]*)\Q]\E/$special{$1}/eg) { }
    while (s/\Q\*(\E(..)/$strings{$1}/eg) { }
    s/</&lt;/g; s/>/&gt;/g;
    return $_;
}

sub conv_url {
    local ($_) = $_[0];
    # Exception: we don't want to convert these into links
    if (m#http://www.ebi.ac.uk/ena/cram/md5# || m#//host/#) {
        return $_;
    }
    # NB This is nowhere near complete, but sufficient for our purposes
    s#(https?://[A-Za-z0-9._~-]+/(?:[A-Za-z0-9._-]+/)*(?:[A-Za-z0-9_-]+(\.html|\.pdf|/)?)?)#<a href="$1">$1</a>#g;
    return $_;
}

sub ignore {
    return undef;
}

sub ignore_macro_def {
    while ($_ = getline()) { last if /^[.'][.]/ }
    return undef;
}

sub include {
    my (undef, $fname) = @_;
    open_input($fname);
    return undef;
}

sub title_html {
    my (undef, $title, $section) = @_;

    $final_trailer = "</body></html>";
    return substr(<<"EOF", 0, -1);
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>$title($section) manual page</title>
</head><body class="manpage">
EOF
}

sub title_jekyll {
    my (undef, $title, $section, $date, $package, $section_text) = @_;

    my @out;
    push @out, "permalink: $permalink" if defined $permalink;
    push @out, "layout: manpage", "title: $title($section) manual page";
    push @out, "package: $package" if defined $package;
    push @out, "date: $date" if defined $date;
    push @out, "section_text: $section_text" if defined $section_text;
    return join("\n", '---', @out, '---');
}

sub make_fragment {
    my ($text) = @_;
    $text =~ s/<.*>//g;
    $text =~ s/\s+/_/g;
    if (!exists($fragments{$text})) {
        $fragments{$text} = 1;
        return $text;
    }
    for (my $num = 2; ; $num++) {
        my $fragment = "${text}_$num";
        if (!exists($fragments{$fragment})) {
            $fragments{$fragment} = 1;
            return $fragment;
        }
    }
}

my %section = ( SH => 'h1', SS => 'h2' );
sub section {
    my $level = $section{shift @_};
    my $out = conv_fontescape(conv_special(join(' ', @_)), 1);
    my $prefix = "";
    if (defined $paramode_close{$paramode[0]}) {
        $prefix = "$paramode_close{$paramode[0]}\n";
        $paramode[0] = 'p';
    }
    my $fragment = make_fragment($out);
    return qq[$prefix<$level id="$fragment"><a href="#$fragment">$out</a></$level>];
}

sub paragraph {
    my $prefix = "";
    if (defined $paramode_close{$paramode[0]} && $_[0] ne 'IP' && $_[0] ne '') {
        $prefix = $paramode_close{$paramode[0]};
        $paramode[0] = 'p';
    }
    return "$prefix<p>";
}

sub setmargin {
    unshift @paramode, 'p';
    return undef;
}

sub resetmargin {
    my $prevmode = shift @paramode;
    if (scalar @paramode == 0) {
        warnloc "unmatched .RE request\n";
        @paramode = ('p');
    }
    return $paramode_close{$prevmode};
}

sub definition {
    my $prefix = "</dd>";
    if ($paramode[0] ne 'dl') { $prefix = "<dl>"; $paramode[0] = 'dl'; }

    my $line = getline();
    my $term = expand_line($line);
    return "$prefix<dt>$term</dt><dd><p>";
}

sub list {
    if (!$_[1] || !exists $bullets{$_[1]}) { return paragraph(@_); }
    my $prefix = "</li>\n";
    if ($paramode[0] ne 'ul') { $prefix = "<ul>"; $paramode[0] = 'ul'; }

    my $line = getline();
    my $item = expand_line($line);
    return "$prefix<li>$item";
}

my %font_style = ( B => 'b', I => 'em', R => undef );
sub singlefont {
    my $style = $font_style{shift @_};
    @_ = map { conv_special($_) } @_;
    return "<$style>@_</$style>";
}

sub twinfont {
    my $font = shift @_;
    my $out = "";
    for my $i (0 .. $#_) {
        my $style = $font_style{substr($font, $i % 2, 1)};
        $out .= "<$style>" if defined $style;
        $out .= conv_special($_[$i]);
        $out .= "</$style>" if defined $style;
    }
    return $out;
}

my %constant = (
    TH => undef, br => '<br>',
    EX => "<pre>", EE => "</pre>",
);
sub constant {
    return $constant{shift @_};
}

sub table {
    my @formats = ();
    my $options = "";
    my $alignment = "";
    my $separator = "\t";
    while ($_ = getline()) {
        chomp;
        my $last = 0;
        if (s/;$//) {
            $options = $_;
            $alignment = q{ align="center"} if /cent[er][re]/;
            $separator = $1 if /tab\s*\((.)\)/;
        }
        else {
            $last = 1 if s/\.$//;
            push @formats, lc $_ if /[^-\s]/;
        }
        last if $last;
    }

    my $out = "<table$alignment>\n";

    while ($_ = getline()) {
        chomp;
        last if /^[.']TE/;

        while (/T\{$/) {
            my $line = substr($_, 0, -2);
            while ($_ = getline()) {
                chomp;
                last if /^T\}/;
                $line .= "$_ ";
            }
            $_ = $line . substr($_, 2);
        }

        my ($format, $td);
        if (scalar @formats > 1) { $format = shift @formats; $td = "th" }
        else { $format = $formats[0]; $td = "td" }
        # Ensure column entries are space-separated (without leading whitespace)
        $format =~ s/([lrcnas^_=])/ $1/g;
        $format =~ s/^\s+//;
        my @format = split /\s+/, $format;

        $out .= "<tr>";
        foreach (split $separator, $_) {
            s/^\s*//; s/\s*$//;

            my $fmt = shift @format;
            $_ = "\\fB$_" if $fmt =~ /b/;
            $_ = "\\fI$_" if $fmt =~ /i/;
            $_ = conv_fontescape(conv_special($_), 1);
            $out .= "<$td>$_</$td>";
        }
        $out .= "</tr>\n";
    }

    $out .= "</table>";
    return $out;
}

my %request = (
    TH => $TH_subref, SH => \&section, SS => \&section,
    PP => \&paragraph, P => \&paragraph, IP => \&list, LP => \&paragraph,
    RS => \&setmargin, RE => \&resetmargin, TP => \&definition,
    B => \&singlefont, I => \&singlefont, BI => \&twinfont, BR => \&twinfont,
    IB => \&twinfont, IR => \&twinfont, RB => \&twinfont, RI => \&twinfont,
    br => \&constant, ad => \&ignore, na => \&ignore, de => \&ignore_macro_def,
    EX => \&constant, EE => \&constant,
    TS => \&table, '\"' => \&ignore, so => \&include,
);

$0 =~ s{.*/}{};

sub expand_line {
    local $_ = $_[0];
    chomp;

    if (/^[.']/) {
        if (length $_ == 1) { return undef }
        @_ = split_quoted(substr($_, 1));
        if (exists $request{$_[0]}) { return $request{$_[0]}(@_) }
        else { warnloc "unknown request '$_[0]'\n"; return undef }
    }
    elsif ($_ eq '') { return paragraph('') }
    else { return conv_url(conv_fontescape(conv_special($_))) }
}


my $outf;
if (defined $output_fname) {
    open $outf,'>',$output_fname or die "$0: can't create $output_fname: $!\n";
}
else { $outf = \*STDOUT }

open_input($ARGV[0]);

while ($_ = getline()) {
    $_ = expand_line($_);
    print $outf "$_\n" if defined $_;
}
print $outf "$final_trailer\n" if defined $final_trailer;

if (defined $output_fname) {
    close $outf or die "$0: can't close $output_fname: $!\n";
}

exit 0;
